// This file was GENERATED by command:
//     pump.py to_json.hpp.pump
// DO NOT EDIT BY HAND!!!

#ifndef TO_JSON_HPP
#define TO_JSON_HPP
#include <string>
#include <vector>
#include <map>

inline
void json_encode(std::string &sString) {
        int length = sString.length();
        char buf[length * 10 + 128];
        memset(buf, 0, sizeof(buf));

        char* it = (char*) sString.c_str();
        char *out = buf;

        for (int i = 0; i < length; i++) {
                switch (*it) {
                case '<':
                        memcpy(out, "&lt;", strlen("&lt;"));
                        out += strlen("&lt;");
                        break;

                case '>':
                        memcpy(out, "&gt;", strlen("&gt;"));
                        out += strlen("&gt;");
                        break;

                case '\"':
                        memcpy(out, "&quot;", strlen("&quot;"));
                        out += strlen("&quot;");
                        break;

                case '\'':
                        memcpy(out, "&#39;", strlen("&#39;"));
                        out += strlen("&#39;");
                        break;

                case '\\':
                        memcpy(out, "&#92;", strlen("&#92;"));
                        out += strlen("&#92;");
                        break;

                case '\n':
                        memcpy(out, "\\n", strlen("\\n"));
                        out += strlen("\\n");
                        break;

                case '\r':
                        memcpy(out, "\\r", strlen("\\r"));
                        out += strlen("\\r");
                        break;

                case '\t':
                        memcpy(out, "\\t", strlen("\\t"));
                        out += strlen("\\t");
                        break;

                        break;

                default:
                        if (!((*it) >= 0 && (*it) <= 31 && (*it) != 9 && (*it)
                            != 10
                                && (*it) != 13)) {
                                        *out = *it;
                                        out++;
                        }
                }
                it++;
        }
        sString = buf;
        return;
}

#define DEF_BASETYPE_TO_JSON(fmt, type) \
inline \
void to_json_value(std::string &out, type value) { \
    char buffer[sizeof(typeof(value))*3+4]; \
    snprintf(buffer, sizeof(buffer), fmt, value); \
    out.append(buffer); \
} \
inline \
std::string to_json(type value) { \
	std::string out; \
	to_json_value(out, value); \
	return out; \
} \



DEF_BASETYPE_TO_JSON("%d", int)
DEF_BASETYPE_TO_JSON("%u", unsigned int)
DEF_BASETYPE_TO_JSON("%ld", long)
DEF_BASETYPE_TO_JSON("%lu", unsigned long)
DEF_BASETYPE_TO_JSON("%lld", long long)
DEF_BASETYPE_TO_JSON("%llu", unsigned long long)
DEF_BASETYPE_TO_JSON("%f", double)
DEF_BASETYPE_TO_JSON("%Lf", long double)


inline
void to_json_value(std::string &out, std::string str) {
	json_encode(str);
	out.append("\"");
	out.append(str);
	out.append("\"");
}

inline
void to_json_value(std::string &out, char const * str) {
	to_json_value(out, std::string(str));
}

template <typename t>
inline
void to_json_value(std::string & out, std::vector<t> const & vec) {
	out.append("[");
	for ( size_t i=0, len=vec.size();
            i<len; ++i){
	       if (i > 0) out.append(",");
	       to_json_value(out, vec[i]);
	}
	out.append("]");
}


#define to_json_attr2(out, name, value) \
    do { \
        out.append("\""); \
        out.append(name); \
        out.append("\""); \
        out.append(":"); \
        to_json_helper(out, value); \
    } while(0)\

#define to_json_attr(out, name) \
    do { \
        to_json_attr2(out, #name, name); \
    } while(0) \

template <typename t>
inline
void to_json_value(std::string & out, std::map<std::string, t> const & map) {
       out.append("{");
    size_t i=0;
    for (typeof(map.begin()) it = map.begin(), iend = map.end();
        it!=iend; ++it, ++i) {
       if (i > 0) out.append(",");
       to_json_attr2(out, it->first, it->second);
    }
   out.append("}");
}

template <typename t>
inline
void to_json_value(std::string & out, std::map<char *, t> const & map) {
       out.append("{");
    size_t i=0;
    for (typeof(map.begin()) it = map.begin(), iend = map.end();
        it!=iend; ++it, ++i) {
       if (i > 0) out.append(",");
       to_json_attr2(out, it->first, it->second);
    }
   out.append("}");
}

template <typename t>
inline
void to_json_value(std::string & out, std::map<char const *, t> const & map) {
       out.append("{");
    size_t i=0;
    for (typeof(map.begin()) it = map.begin(), iend = map.end();
        it!=iend; ++it, ++i) {
       if (i > 0) out.append(",");
       to_json_attr2(out, it->first, it->second);
    }
   out.append("}");
}


#define BASE_TYPE_MAP_TO_JSON(t1) \
template <typename t> \
inline \
void to_json_value(std::string & out, std::map<t1, t> const & map) { \
       out.append("{"); \
    size_t i=0; \
    for (typeof(map.begin()) it = map.begin(), iend = map.end(); \
        it!=iend; ++it, ++i) { \
       if (i > 0) out.append(","); \
       std::string key; \
       to_json_value(key, it->first); \
       to_json_attr2(out, key, it->second); \
    }  \
   out.append("}"); \
} \

BASE_TYPE_MAP_TO_JSON(char)
BASE_TYPE_MAP_TO_JSON(int)
BASE_TYPE_MAP_TO_JSON(short int)
BASE_TYPE_MAP_TO_JSON(long)
BASE_TYPE_MAP_TO_JSON(long long)

BASE_TYPE_MAP_TO_JSON(unsigned char)
BASE_TYPE_MAP_TO_JSON(unsigned int)
BASE_TYPE_MAP_TO_JSON(unsigned short int)
BASE_TYPE_MAP_TO_JSON(unsigned long)
BASE_TYPE_MAP_TO_JSON(unsigned long long)

//BASE_TYPE_MAP_TO_JSON(uint8_t)
//BASE_TYPE_MAP_TO_JSON(uint16_t)
//BASE_TYPE_MAP_TO_JSON(uint32_t)
//BASE_TYPE_MAP_TO_JSON(uint64_t)
//
//BASE_TYPE_MAP_TO_JSON(int8_t)
//BASE_TYPE_MAP_TO_JSON(int16_t)
//BASE_TYPE_MAP_TO_JSON(int32_t)
//BASE_TYPE_MAP_TO_JSON(int64_t)


template <typename t>
inline
void to_json_value(std::string & out, t const &v) {
    v.to_json_value(out);
}

template <typename t>
inline
std::string to_json(t const & v) {
    std::string out;
    to_json_value(out, v);
    return out;
}

template <typename t>
inline
std::string to_json_helper(t const & v) {
    return to_json(v);
}

template <typename t>
inline
void to_json_helper(std::string & out, t const &v) {
    to_json_value(out, v);
}

#define DEF_TO_JSON1(type, arg1) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON2(type , arg1, arg2 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON3(type , arg1, arg2, arg3 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON4(type , arg1, arg2, arg3, arg4 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON5(type , arg1, arg2, arg3, arg4, arg5 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON6(type , arg1, arg2, arg3, arg4, arg5, arg6 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON7(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON8(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON9(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON10(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON11(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON12(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON13(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, v.arg13); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON14(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, v.arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, v.arg14); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON15(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, v.arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, v.arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, v.arg15); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON16(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, v.arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, v.arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, v.arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, v.arg16); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON17(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, v.arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, v.arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, v.arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, v.arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, v.arg17); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON18(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, v.arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, v.arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, v.arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, v.arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, v.arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, v.arg18); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON19(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, v.arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, v.arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, v.arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, v.arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, v.arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, v.arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, v.arg19); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON20(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, v.arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, v.arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, v.arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, v.arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, v.arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, v.arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, v.arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, v.arg20); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON21(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, v.arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, v.arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, v.arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, v.arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, v.arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, v.arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, v.arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, v.arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, v.arg21); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON22(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, v.arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, v.arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, v.arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, v.arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, v.arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, v.arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, v.arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, v.arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, v.arg21); \
    out.append(",");  \
    to_json_attr2(out, #arg22, v.arg22); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON23(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, v.arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, v.arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, v.arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, v.arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, v.arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, v.arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, v.arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, v.arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, v.arg21); \
    out.append(",");  \
    to_json_attr2(out, #arg22, v.arg22); \
    out.append(",");  \
    to_json_attr2(out, #arg23, v.arg23); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON24(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, v.arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, v.arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, v.arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, v.arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, v.arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, v.arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, v.arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, v.arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, v.arg21); \
    out.append(",");  \
    to_json_attr2(out, #arg22, v.arg22); \
    out.append(",");  \
    to_json_attr2(out, #arg23, v.arg23); \
    out.append(",");  \
    to_json_attr2(out, #arg24, v.arg24); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON25(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24, arg25 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, v.arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, v.arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, v.arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, v.arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, v.arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, v.arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, v.arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, v.arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, v.arg21); \
    out.append(",");  \
    to_json_attr2(out, #arg22, v.arg22); \
    out.append(",");  \
    to_json_attr2(out, #arg23, v.arg23); \
    out.append(",");  \
    to_json_attr2(out, #arg24, v.arg24); \
    out.append(",");  \
    to_json_attr2(out, #arg25, v.arg25); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON26(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, v.arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, v.arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, v.arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, v.arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, v.arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, v.arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, v.arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, v.arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, v.arg21); \
    out.append(",");  \
    to_json_attr2(out, #arg22, v.arg22); \
    out.append(",");  \
    to_json_attr2(out, #arg23, v.arg23); \
    out.append(",");  \
    to_json_attr2(out, #arg24, v.arg24); \
    out.append(",");  \
    to_json_attr2(out, #arg25, v.arg25); \
    out.append(",");  \
    to_json_attr2(out, #arg26, v.arg26); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON27(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, v.arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, v.arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, v.arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, v.arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, v.arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, v.arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, v.arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, v.arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, v.arg21); \
    out.append(",");  \
    to_json_attr2(out, #arg22, v.arg22); \
    out.append(",");  \
    to_json_attr2(out, #arg23, v.arg23); \
    out.append(",");  \
    to_json_attr2(out, #arg24, v.arg24); \
    out.append(",");  \
    to_json_attr2(out, #arg25, v.arg25); \
    out.append(",");  \
    to_json_attr2(out, #arg26, v.arg26); \
    out.append(",");  \
    to_json_attr2(out, #arg27, v.arg27); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON28(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, v.arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, v.arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, v.arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, v.arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, v.arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, v.arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, v.arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, v.arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, v.arg21); \
    out.append(",");  \
    to_json_attr2(out, #arg22, v.arg22); \
    out.append(",");  \
    to_json_attr2(out, #arg23, v.arg23); \
    out.append(",");  \
    to_json_attr2(out, #arg24, v.arg24); \
    out.append(",");  \
    to_json_attr2(out, #arg25, v.arg25); \
    out.append(",");  \
    to_json_attr2(out, #arg26, v.arg26); \
    out.append(",");  \
    to_json_attr2(out, #arg27, v.arg27); \
    out.append(",");  \
    to_json_attr2(out, #arg28, v.arg28); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON29(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, \
    arg29 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, v.arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, v.arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, v.arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, v.arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, v.arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, v.arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, v.arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, v.arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, v.arg21); \
    out.append(",");  \
    to_json_attr2(out, #arg22, v.arg22); \
    out.append(",");  \
    to_json_attr2(out, #arg23, v.arg23); \
    out.append(",");  \
    to_json_attr2(out, #arg24, v.arg24); \
    out.append(",");  \
    to_json_attr2(out, #arg25, v.arg25); \
    out.append(",");  \
    to_json_attr2(out, #arg26, v.arg26); \
    out.append(",");  \
    to_json_attr2(out, #arg27, v.arg27); \
    out.append(",");  \
    to_json_attr2(out, #arg28, v.arg28); \
    out.append(",");  \
    to_json_attr2(out, #arg29, v.arg29); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \


#define DEF_TO_JSON30(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, \
    arg29, arg30 ) \
inline \
void to_json_value(std::string & out, type const & v) { \
    out.append("{"); \
    to_json_attr2(out, #arg1, v.arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, v.arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, v.arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, v.arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, v.arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, v.arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, v.arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, v.arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, v.arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, v.arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, v.arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, v.arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, v.arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, v.arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, v.arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, v.arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, v.arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, v.arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, v.arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, v.arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, v.arg21); \
    out.append(",");  \
    to_json_attr2(out, #arg22, v.arg22); \
    out.append(",");  \
    to_json_attr2(out, #arg23, v.arg23); \
    out.append(",");  \
    to_json_attr2(out, #arg24, v.arg24); \
    out.append(",");  \
    to_json_attr2(out, #arg25, v.arg25); \
    out.append(",");  \
    to_json_attr2(out, #arg26, v.arg26); \
    out.append(",");  \
    to_json_attr2(out, #arg27, v.arg27); \
    out.append(",");  \
    to_json_attr2(out, #arg28, v.arg28); \
    out.append(",");  \
    to_json_attr2(out, #arg29, v.arg29); \
    out.append(",");  \
    to_json_attr2(out, #arg30, v.arg30); \
    out.append("}"); \
} \
inline \
std::string to_json(type const & v) { \
    std::string out; \
    to_json_value(out, v); \
    return out; \
} \




#define DEF_TO_JSON_MEM1(arg1) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1 , this->arg1);   \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM2(arg1 , arg2 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM3(arg1 , arg2, arg3 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM4(arg1 , arg2, arg3, arg4 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM5(arg1 , arg2, arg3, arg4, arg5 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM6(arg1 , arg2, arg3, arg4, arg5, arg6 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM7(arg1 , arg2, arg3, arg4, arg5, arg6, arg7 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM8(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM9(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM10(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM11(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM12(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM13(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, this->arg13); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM14(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, this->arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, this->arg14); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM15(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, this->arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, this->arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, this->arg15); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM16(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, this->arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, this->arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, this->arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, this->arg16); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM17(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, this->arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, this->arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, this->arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, this->arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, this->arg17); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM18(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, this->arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, this->arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, this->arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, this->arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, this->arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, this->arg18); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM19(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, this->arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, this->arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, this->arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, this->arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, this->arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, this->arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, this->arg19); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM20(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, this->arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, this->arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, this->arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, this->arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, this->arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, this->arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, this->arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, this->arg20); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM21(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, this->arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, this->arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, this->arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, this->arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, this->arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, this->arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, this->arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, this->arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, this->arg21); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM22(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, this->arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, this->arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, this->arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, this->arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, this->arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, this->arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, this->arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, this->arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, this->arg21); \
    out.append(",");  \
    to_json_attr2(out, #arg22, this->arg22); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM23(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, this->arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, this->arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, this->arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, this->arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, this->arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, this->arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, this->arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, this->arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, this->arg21); \
    out.append(",");  \
    to_json_attr2(out, #arg22, this->arg22); \
    out.append(",");  \
    to_json_attr2(out, #arg23, this->arg23); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM24(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, this->arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, this->arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, this->arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, this->arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, this->arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, this->arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, this->arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, this->arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, this->arg21); \
    out.append(",");  \
    to_json_attr2(out, #arg22, this->arg22); \
    out.append(",");  \
    to_json_attr2(out, #arg23, this->arg23); \
    out.append(",");  \
    to_json_attr2(out, #arg24, this->arg24); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM25(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24, arg25 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, this->arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, this->arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, this->arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, this->arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, this->arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, this->arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, this->arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, this->arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, this->arg21); \
    out.append(",");  \
    to_json_attr2(out, #arg22, this->arg22); \
    out.append(",");  \
    to_json_attr2(out, #arg23, this->arg23); \
    out.append(",");  \
    to_json_attr2(out, #arg24, this->arg24); \
    out.append(",");  \
    to_json_attr2(out, #arg25, this->arg25); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM26(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, this->arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, this->arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, this->arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, this->arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, this->arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, this->arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, this->arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, this->arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, this->arg21); \
    out.append(",");  \
    to_json_attr2(out, #arg22, this->arg22); \
    out.append(",");  \
    to_json_attr2(out, #arg23, this->arg23); \
    out.append(",");  \
    to_json_attr2(out, #arg24, this->arg24); \
    out.append(",");  \
    to_json_attr2(out, #arg25, this->arg25); \
    out.append(",");  \
    to_json_attr2(out, #arg26, this->arg26); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM27(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, this->arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, this->arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, this->arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, this->arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, this->arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, this->arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, this->arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, this->arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, this->arg21); \
    out.append(",");  \
    to_json_attr2(out, #arg22, this->arg22); \
    out.append(",");  \
    to_json_attr2(out, #arg23, this->arg23); \
    out.append(",");  \
    to_json_attr2(out, #arg24, this->arg24); \
    out.append(",");  \
    to_json_attr2(out, #arg25, this->arg25); \
    out.append(",");  \
    to_json_attr2(out, #arg26, this->arg26); \
    out.append(",");  \
    to_json_attr2(out, #arg27, this->arg27); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM28(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, this->arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, this->arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, this->arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, this->arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, this->arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, this->arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, this->arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, this->arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, this->arg21); \
    out.append(",");  \
    to_json_attr2(out, #arg22, this->arg22); \
    out.append(",");  \
    to_json_attr2(out, #arg23, this->arg23); \
    out.append(",");  \
    to_json_attr2(out, #arg24, this->arg24); \
    out.append(",");  \
    to_json_attr2(out, #arg25, this->arg25); \
    out.append(",");  \
    to_json_attr2(out, #arg26, this->arg26); \
    out.append(",");  \
    to_json_attr2(out, #arg27, this->arg27); \
    out.append(",");  \
    to_json_attr2(out, #arg28, this->arg28); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM29(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, \
    arg29 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, this->arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, this->arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, this->arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, this->arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, this->arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, this->arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, this->arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, this->arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, this->arg21); \
    out.append(",");  \
    to_json_attr2(out, #arg22, this->arg22); \
    out.append(",");  \
    to_json_attr2(out, #arg23, this->arg23); \
    out.append(",");  \
    to_json_attr2(out, #arg24, this->arg24); \
    out.append(",");  \
    to_json_attr2(out, #arg25, this->arg25); \
    out.append(",");  \
    to_json_attr2(out, #arg26, this->arg26); \
    out.append(",");  \
    to_json_attr2(out, #arg27, this->arg27); \
    out.append(",");  \
    to_json_attr2(out, #arg28, this->arg28); \
    out.append(",");  \
    to_json_attr2(out, #arg29, this->arg29); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \


#define DEF_TO_JSON_MEM30(arg1 , arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, \
    arg29, arg30 ) \
inline \
void to_json_value(std::string & out) const { \
    out.append("{"); \
    to_json_attr2(out, #arg1, this->arg1);   \
    out.append(",");  \
    to_json_attr2(out, #arg2, this->arg2); \
    out.append(",");  \
    to_json_attr2(out, #arg3, this->arg3); \
    out.append(",");  \
    to_json_attr2(out, #arg4, this->arg4); \
    out.append(",");  \
    to_json_attr2(out, #arg5, this->arg5); \
    out.append(",");  \
    to_json_attr2(out, #arg6, this->arg6); \
    out.append(",");  \
    to_json_attr2(out, #arg7, this->arg7); \
    out.append(",");  \
    to_json_attr2(out, #arg8, this->arg8); \
    out.append(",");  \
    to_json_attr2(out, #arg9, this->arg9); \
    out.append(",");  \
    to_json_attr2(out, #arg10, this->arg10); \
    out.append(",");  \
    to_json_attr2(out, #arg11, this->arg11); \
    out.append(",");  \
    to_json_attr2(out, #arg12, this->arg12); \
    out.append(",");  \
    to_json_attr2(out, #arg13, this->arg13); \
    out.append(",");  \
    to_json_attr2(out, #arg14, this->arg14); \
    out.append(",");  \
    to_json_attr2(out, #arg15, this->arg15); \
    out.append(",");  \
    to_json_attr2(out, #arg16, this->arg16); \
    out.append(",");  \
    to_json_attr2(out, #arg17, this->arg17); \
    out.append(",");  \
    to_json_attr2(out, #arg18, this->arg18); \
    out.append(",");  \
    to_json_attr2(out, #arg19, this->arg19); \
    out.append(",");  \
    to_json_attr2(out, #arg20, this->arg20); \
    out.append(",");  \
    to_json_attr2(out, #arg21, this->arg21); \
    out.append(",");  \
    to_json_attr2(out, #arg22, this->arg22); \
    out.append(",");  \
    to_json_attr2(out, #arg23, this->arg23); \
    out.append(",");  \
    to_json_attr2(out, #arg24, this->arg24); \
    out.append(",");  \
    to_json_attr2(out, #arg25, this->arg25); \
    out.append(",");  \
    to_json_attr2(out, #arg26, this->arg26); \
    out.append(",");  \
    to_json_attr2(out, #arg27, this->arg27); \
    out.append(",");  \
    to_json_attr2(out, #arg28, this->arg28); \
    out.append(",");  \
    to_json_attr2(out, #arg29, this->arg29); \
    out.append(",");  \
    to_json_attr2(out, #arg30, this->arg30); \
    out.append("}"); \
} \
inline   \
std::string to_json() const { \
    std::string out; \
    this->to_json_value(out); \
    return out; \
} \






#endif  //TO_JSON_HPP
