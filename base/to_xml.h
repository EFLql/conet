// This file was GENERATED by command:
//     pump.py to_xml.h.pump
// DO NOT EDIT BY HAND!!!

// This file was GENERATED by command:
//     pump.py to_xml.hpp.pump
// DO NOT EDIT BY HAND!!!

#ifndef __CONET_TO_XML_H__
#define __CONET_TO_XML_H__
#include <string>
#include <vector>
#include <map>
#include <stdio.h>
#include <stdint.h>

#include "macro_help.h"


inline
void xml_escape(std::string &sString) 
{
        int length = sString.length();
        std::string out;
        char* it = (char*) sString.c_str();
	    int ch = 0;
	for (int i = 0; i < length; ++i){
		ch = (unsigned char)(*it);
        switch (ch) {

#define CONET_XML_ESCAPE(ch, rep)  \
		case ch: \
                 out.append(rep); \
                break

            CONET_XML_ESCAPE('<', "&lt;");
            CONET_XML_ESCAPE('>', "&gt;");
            CONET_XML_ESCAPE('&', "&amp;");
            CONET_XML_ESCAPE('\'', "&apos;");
            CONET_XML_ESCAPE('\"', "&quot;");

            default:
                out.push_back(ch);
        }
        ++it;
    }
    out.swap(sString);
}

#define DEF_BASETYPE_TO_XML_VALUE(fmt, type) \
inline \
void to_xml_value(std::string &out, type value) \
{ \
    char buffer[40]={0}; \
    snprintf(buffer, sizeof(buffer), fmt, value); \
    out.append(buffer); \
} \


DEF_BASETYPE_TO_XML_VALUE("%d", int)
DEF_BASETYPE_TO_XML_VALUE("%u", unsigned int)
DEF_BASETYPE_TO_XML_VALUE("%ld", long)
DEF_BASETYPE_TO_XML_VALUE("%lu", unsigned long)
DEF_BASETYPE_TO_XML_VALUE("%lld", long long)
DEF_BASETYPE_TO_XML_VALUE("%llu", unsigned long long)
DEF_BASETYPE_TO_XML_VALUE("%f", double)
DEF_BASETYPE_TO_XML_VALUE("%Lf", long double)


inline
void to_xml_value(std::string &out, std::string str) {
	xml_escape(str);
	out.append(str);
}

inline
void to_xml_value(std::string &out, char const * str) {
	to_xml_value(out, std::string(str));
}


#define DEF_BASETYPE_TO_XML_MEMBER(t) \
inline \
void to_xml_member2(std::string & out, char const * name, \
    std::vector<t> const & vec) { \
    std::string head_tag = "<"; \
    head_tag += name; head_tag += ">"; \
    std::string tail_tag = "</"; \
    tail_tag += name; tail_tag += ">"; \
	for ( size_t i=0, len=vec.size(); \
            i<len; ++i){ \
            out.append(head_tag); \
	        to_xml_value(out, vec[i]); \
            out.append(tail_tag); \
	} \
} \
inline  \
void to_xml_member2(std::string & out, char const *name, t const &value)  \
    {  \
        out.append("<");  \
        out.append(name);  \
        out.append(">");  \
        to_xml_value(out, value);  \
        out.append("</");  \
        out.append(name);  \
        out.append(">"); \
    }  \


DEF_BASETYPE_TO_XML_MEMBER(int)
DEF_BASETYPE_TO_XML_MEMBER(unsigned int)
DEF_BASETYPE_TO_XML_MEMBER(long)
DEF_BASETYPE_TO_XML_MEMBER(unsigned long)
DEF_BASETYPE_TO_XML_MEMBER(long long)
DEF_BASETYPE_TO_XML_MEMBER(unsigned long long)
DEF_BASETYPE_TO_XML_MEMBER(double)
DEF_BASETYPE_TO_XML_MEMBER(long double)
DEF_BASETYPE_TO_XML_MEMBER(char const*)
DEF_BASETYPE_TO_XML_MEMBER(std::string)

template <typename t>
inline
void to_xml_member(std::string & out, char const *name,
    std::vector<t> const & vec) {
	for ( size_t i=0, len=vec.size();
            i<len; ++i){
	       to_xml_value(out, vec[i]);
	}
}

#define to_xml_member(out, name) \
    do { \
        to_xml_member2(out, #name, name); \
    } while(0 )\


template<typename t>
inline
void to_xml_member2(std::string & out, char const *name, t const &value)
    {
        to_xml_value(out, value, name);
    }


template <typename t>
inline
void to_xml_value(std::string & out, std::map<std::string, t> const & map) {
    size_t i=0;
    for (typeof(map.begin()) it = map.begin(), iend = map.end();
        it!=iend; ++it, ++i) {
       to_xml_member2(out, it->first.c_str(),  it->second);
    }
}

template <typename t>
inline
void to_xml_value(std::string & out, t const &v)  {
    v.to_xml(out);
}

template <typename t>
inline
void to_xml_value(std::string & out, t const &v, char const *name) {
    v.to_xml(out, name);
}

template <typename t>
inline
std::string to_xml(t const & v) {
    std::string out;
    to_xml(out, v);
    return out;
}

template <typename t>
inline
void to_xml_helper(std::string & out, t const &v, char const *name) {
    to_xml_value(out, v, name);
}

template <typename t>
inline
std::string to_xml_helper(t const & v) {
    return to_xml(v);
}

#define CONET_XML_ATTR_OUT(r, out, attr) \
			out.append(" " BOOST_PP_STRINGIZE(attr) "=\""); \
                to_xml_value(out, v.attr); \
            out.append("\"");\



#define CONET_XML_ELEMENT_OUT(r, out, name) \
	to_xml_member2(out, BOOST_PP_STRINGIZE(name), v.name); \



#define DEF_TO_XML(type , param) DEF_TO_XML_IMPL(type, BOOST_PP_VARIADIC_TO_SEQ param)

#define DEF_TO_XML_IMPL(type, seq_param) \
inline \
void to_xml_value(std::string & out, type const & v, const char * tag_name=BOOST_PP_STRINGIZE(type)) \
{ \
    out.append("<"); out.append(tag_name); out.append(">"); \
        BOOST_PP_SEQ_FOR_EACH(CONET_XML_ELEMENT_OUT, out, seq_param)  \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \

#define DEF_TO_XML_WITH_ATTR(type , attrs,  ...)  \
    BOOST_PP_IF(BOOST_PP_VARIADIC_SIZE(__VA_ARGS__),  \
        DEF_TO_XML_WITH_ATTR_IMPL(type, BOOST_PP_VARIADIC_TO_SEQ attrs,  \
            BOOST_PP_VARIADIC_TO_SEQ __VA_ARGS__, 1), \
        DEF_TO_XML_WITH_ATTR_IMPL(type, BOOST_PP_VARIADIC_TO_SEQ attrs,  \
            BOOST_PP_VARIADIC_TO_SEQ __VA_ARGS__, 0))

#define DEF_TO_XML_WITH_ATTR_IMPL(type, seq_attr, seq_param, param_num) \
inline \
void to_xml_value(std::string & out, type const & v, const char * tag_name=BOOST_PP_STRINGIZE(type)) \
{ \
    out.append("<"); out.append(tag_name); \
        BOOST_PP_SEQ_FOR_EACH(CONET_XML_ATTR_OUT, out, seq_attr)  \
    out.append(">"); \
    BOOST_PP_EXPR_IF(BOOST_PP_GREATER(param_num, 0), \
        BOOST_PP_EXPAND( \
            BOOST_PP_SEQ_FOR_EACH(CONET_XML_ELEMENT_OUT, out, seq_param) )) \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \

#define DEF_TO_XML_MEM_WITH_ATTR(tag_name_p, attrs,  ...) \
    BOOST_PP_IF(BOOST_PP_VARIADIC_SIZE(__VA_ARGS__),  \
    DEF_TO_XML_MEM_WITH_ATTR_IMPL(tag_name_p, \
            BOOST_PP_VARIADIC_TO_SEQ attrs, \
            BOOST_PP_VARIADIC_SIZE attrs, \
            BOOST_PP_VARIADIC_TO_SEQ __VA_ARGS__, \
            1 \
    ), \
    DEF_TO_XML_MEM_WITH_ATTR_IMPL(tag_name_p, \
            BOOST_PP_VARIADIC_TO_SEQ attrs, \
            BOOST_PP_VARIADIC_SIZE attrs, \
            (), \
            0 \
    ))


#define DEF_TO_XML_MEM_WITH_ATTR_IMPL(tag_name_p, seq_attr, attr_num, elements, el_num) \
inline \
void to_xml(std::string & out, const char * tag_name=tag_name_p) const \
{ \
    typeof(*this) const & v = *this; \
    out.append("<"); out.append(tag_name); \
        BOOST_PP_SEQ_FOR_EACH (CONET_XML_ATTR_OUT, out, seq_attr) \
    out.append(">"); \
    BOOST_PP_EXPR_IF(BOOST_PP_GREATER(el_num, 0), \
        BOOST_PP_EXPAND( \
            BOOST_PP_SEQ_FOR_EACH (CONET_XML_ELEMENT_OUT, out, elements)) ) \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(char const * tag_name = tag_name_p) const \
{ \
    std::string out; \
    this->to_xml(out, tag_name); \
    return out; \
}  \

#endif  //TO_XML_HPP
